
Simulacro2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800200  000004c4  00000558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001f43  00800224  00800224  0000057c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eb8  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cef  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000477  00000000  00000000  00002203  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  0000267c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bb  00000000  00000000  00002768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000125  00000000  00000000  00002d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002e48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	00 c1       	rjmp	.+512    	; 0x256 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ec       	ldi	r30, 0xC4	; 196
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 32       	cpi	r26, 0x24	; 36
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	21 e2       	ldi	r18, 0x21	; 33
 110:	a4 e2       	ldi	r26, 0x24	; 36
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 36       	cpi	r26, 0x67	; 103
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	6c d0       	rcall	.+216    	; 0x1f8 <main>
 120:	cf c1       	rjmp	.+926    	; 0x4c0 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <ADC_init>:
	*dato = 0;
	*miliseg = 0;
}
void ADC_init( void )
{
	ADMUX = (2<<REFS0)|(1<<ADLAR);	//INTERNAL REF, MSB
 124:	80 ea       	ldi	r24, 0xA0	; 160
 126:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1<<ADEN)|(7<<ADPS0); 	//128 PS
 12a:	87 e8       	ldi	r24, 0x87	; 135
 12c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = 0;						
 130:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0;						//DIGITAL input dis
 134:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
 138:	08 95       	ret

0000013a <ADC_read>:
}
uint8_t ADC_read( void )
{
	ADCSRA |= (1<<ADSC);
 13a:	ea e7       	ldi	r30, 0x7A	; 122
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 64       	ori	r24, 0x40	; 64
 142:	80 83       	st	Z, r24
	while( ADCSRA&(1<<ADSC) );
 144:	80 81       	ld	r24, Z
 146:	86 fd       	sbrc	r24, 6
 148:	fd cf       	rjmp	.-6      	; 0x144 <ADC_read+0xa>
	return ADCH;	
 14a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
 14e:	08 95       	ret

00000150 <ADC_result>:
uint8_t ADC_result( uint8_t dato )
{
 150:	cf 93       	push	r28
	return ( ((dato*1.1)/1024) > UMBRAL_IN )? 1:0;
 152:	68 2f       	mov	r22, r24
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	9b d0       	rcall	.+310    	; 0x292 <__floatsisf>
 15c:	2d ec       	ldi	r18, 0xCD	; 205
 15e:	3c ec       	ldi	r19, 0xCC	; 204
 160:	4c e8       	ldi	r20, 0x8C	; 140
 162:	5f e3       	ldi	r21, 0x3F	; 63
 164:	d5 d0       	rcall	.+426    	; 0x310 <__mulsf3>
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	40 e8       	ldi	r20, 0x80	; 128
 16c:	5a e3       	ldi	r21, 0x3A	; 58
 16e:	d0 d0       	rcall	.+416    	; 0x310 <__mulsf3>
 170:	c1 e0       	ldi	r28, 0x01	; 1
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	4a e7       	ldi	r20, 0x7A	; 122
 178:	54 e4       	ldi	r21, 0x44	; 68
 17a:	c6 d0       	rcall	.+396    	; 0x308 <__gesf2>
 17c:	18 16       	cp	r1, r24
 17e:	0c f0       	brlt	.+2      	; 0x182 <ADC_result+0x32>
 180:	c0 e0       	ldi	r28, 0x00	; 0
}
 182:	8c 2f       	mov	r24, r28
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <Timer0_init>:
void Timer0_init( void )
{
	TCCR0A = (2<<WGM00);
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0;
 18c:	16 bc       	out	0x26, r1	; 38
	OCR0A = 250-1;
 18e:	99 ef       	ldi	r25, 0xF9	; 249
 190:	97 bd       	out	0x27, r25	; 39
	TCCR0B = (2<<CS00); 	//8 PS
 192:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A);
 194:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	sei();
 198:	78 94       	sei
 19a:	08 95       	ret

0000019c <UART0_init>:
}
void UART0_init( void )
{
	UBRR0 = 103;
 19c:	87 e6       	ldi	r24, 0x67	; 103
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 1a4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UCSR0A = (1<<U2X0);
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
 1ae:	88 e1       	ldi	r24, 0x18	; 24
 1b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (3<<UCSZ00);
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 1ba:	08 95       	ret

000001bc <UART0_putchar>:
		UART0_putchar( *str++ );
	}
}
void UART0_putchar( char dato )
{
	while( !(UCSR0A&(1<<UDRE0)) );
 1bc:	e0 ec       	ldi	r30, 0xC0	; 192
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	90 81       	ld	r25, Z
 1c2:	95 ff       	sbrs	r25, 5
 1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <UART0_putchar+0x4>
	UDR0 = dato;
 1c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 1ca:	08 95       	ret

000001cc <UART0_puts>:
	UCSR0A = (1<<U2X0);
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
	UCSR0C = (3<<UCSZ00);
}
void UART0_puts( char *str )
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24
	while( *str )
 1d2:	88 81       	ld	r24, Y
 1d4:	88 23       	and	r24, r24
 1d6:	29 f0       	breq	.+10     	; 0x1e2 <UART0_puts+0x16>
	{
		UART0_putchar( *str++ );
 1d8:	21 96       	adiw	r28, 0x01	; 1
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
	UCSR0C = (3<<UCSZ00);
}
void UART0_puts( char *str )
{
	while( *str )
 1da:	f0 df       	rcall	.-32     	; 0x1bc <UART0_putchar>
 1dc:	89 91       	ld	r24, Y+
 1de:	81 11       	cpse	r24, r1
	{
		UART0_putchar( *str++ );
	}
}
 1e0:	fc cf       	rjmp	.-8      	; 0x1da <UART0_puts+0xe>
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <UART0_getchar>:
	while( !(UCSR0A&(1<<UDRE0)) );
	UDR0 = dato;
}
char UART0_getchar( void )
{
	while( !(UCSR0A&(1<<RXC0)) );
 1e8:	e0 ec       	ldi	r30, 0xC0	; 192
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	88 23       	and	r24, r24
 1f0:	ec f7       	brge	.-6      	; 0x1ec <UART0_getchar+0x4>
	return UDR0;
 1f2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
 1f6:	08 95       	ret

000001f8 <main>:
uint8_t verify = 0;

int main(void)
{	
	uint8_t dato;
	ADC_init();
 1f8:	95 df       	rcall	.-214    	; 0x124 <ADC_init>
 1fa:	c6 df       	rcall	.-116    	; 0x188 <Timer0_init>
 1fc:	cf df       	rcall	.-98     	; 0x19c <UART0_init>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	92 e0       	ldi	r25, 0x02	; 2
 202:	e4 df       	rcall	.-56     	; 0x1cc <UART0_puts>
 204:	f1 df       	rcall	.-30     	; 0x1e8 <UART0_getchar>
 206:	1b c0       	rjmp	.+54     	; 0x23e <main+0x46>
 208:	98 df       	rcall	.-208    	; 0x13a <ADC_read>
 20a:	d8 2f       	mov	r29, r24
 20c:	c0 91 24 02 	lds	r28, 0x0224	; 0x800224 <__data_end>
 210:	cc 23       	and	r28, r28
 212:	a9 f0       	breq	.+42     	; 0x23e <main+0x46>
 214:	9d df       	rcall	.-198    	; 0x150 <ADC_result>
 216:	88 23       	and	r24, r24
 218:	91 f0       	breq	.+36     	; 0x23e <main+0x46>
 21a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <miliseg>
 21e:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <miliseg+0x1>
 222:	9c 01       	movw	r18, r24
 224:	21 50       	subi	r18, 0x01	; 1
 226:	31 09       	sbc	r19, r1
 228:	30 93 26 02 	sts	0x0226, r19	; 0x800226 <miliseg+0x1>
 22c:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <miliseg>
 230:	fc 01       	movw	r30, r24
 232:	e9 5d       	subi	r30, 0xD9	; 217
 234:	fd 4f       	sbci	r31, 0xFD	; 253
 236:	d0 83       	st	Z, r29
 238:	c1 50       	subi	r28, 0x01	; 1
 23a:	c0 93 24 02 	sts	0x0224, r28	; 0x800224 <__data_end>
 23e:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <miliseg>
 242:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <miliseg+0x1>
 246:	81 34       	cpi	r24, 0x41	; 65
 248:	9f 41       	sbci	r25, 0x1F	; 31
 24a:	f0 f2       	brcs	.-68     	; 0x208 <main+0x10>
 24c:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <miliseg+0x1>
 250:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <miliseg>
 254:	d4 cf       	rjmp	.-88     	; 0x1fe <main+0x6>

00000256 <__vector_21>:
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <miliseg>
 268:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <miliseg+0x1>
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <miliseg+0x1>
 272:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <miliseg>
 276:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <__data_end>
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <__floatunsisf>:
 28e:	e8 94       	clt
 290:	09 c0       	rjmp	.+18     	; 0x2a4 <__floatsisf+0x12>

00000292 <__floatsisf>:
 292:	97 fb       	bst	r25, 7
 294:	3e f4       	brtc	.+14     	; 0x2a4 <__floatsisf+0x12>
 296:	90 95       	com	r25
 298:	80 95       	com	r24
 29a:	70 95       	com	r23
 29c:	61 95       	neg	r22
 29e:	7f 4f       	sbci	r23, 0xFF	; 255
 2a0:	8f 4f       	sbci	r24, 0xFF	; 255
 2a2:	9f 4f       	sbci	r25, 0xFF	; 255
 2a4:	99 23       	and	r25, r25
 2a6:	a9 f0       	breq	.+42     	; 0x2d2 <__floatsisf+0x40>
 2a8:	f9 2f       	mov	r31, r25
 2aa:	96 e9       	ldi	r25, 0x96	; 150
 2ac:	bb 27       	eor	r27, r27
 2ae:	93 95       	inc	r25
 2b0:	f6 95       	lsr	r31
 2b2:	87 95       	ror	r24
 2b4:	77 95       	ror	r23
 2b6:	67 95       	ror	r22
 2b8:	b7 95       	ror	r27
 2ba:	f1 11       	cpse	r31, r1
 2bc:	f8 cf       	rjmp	.-16     	; 0x2ae <__floatsisf+0x1c>
 2be:	fa f4       	brpl	.+62     	; 0x2fe <__floatsisf+0x6c>
 2c0:	bb 0f       	add	r27, r27
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <__floatsisf+0x36>
 2c4:	60 ff       	sbrs	r22, 0
 2c6:	1b c0       	rjmp	.+54     	; 0x2fe <__floatsisf+0x6c>
 2c8:	6f 5f       	subi	r22, 0xFF	; 255
 2ca:	7f 4f       	sbci	r23, 0xFF	; 255
 2cc:	8f 4f       	sbci	r24, 0xFF	; 255
 2ce:	9f 4f       	sbci	r25, 0xFF	; 255
 2d0:	16 c0       	rjmp	.+44     	; 0x2fe <__floatsisf+0x6c>
 2d2:	88 23       	and	r24, r24
 2d4:	11 f0       	breq	.+4      	; 0x2da <__floatsisf+0x48>
 2d6:	96 e9       	ldi	r25, 0x96	; 150
 2d8:	11 c0       	rjmp	.+34     	; 0x2fc <__floatsisf+0x6a>
 2da:	77 23       	and	r23, r23
 2dc:	21 f0       	breq	.+8      	; 0x2e6 <__floatsisf+0x54>
 2de:	9e e8       	ldi	r25, 0x8E	; 142
 2e0:	87 2f       	mov	r24, r23
 2e2:	76 2f       	mov	r23, r22
 2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <__floatsisf+0x5e>
 2e6:	66 23       	and	r22, r22
 2e8:	71 f0       	breq	.+28     	; 0x306 <__floatsisf+0x74>
 2ea:	96 e8       	ldi	r25, 0x86	; 134
 2ec:	86 2f       	mov	r24, r22
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	2a f0       	brmi	.+10     	; 0x2fe <__floatsisf+0x6c>
 2f4:	9a 95       	dec	r25
 2f6:	66 0f       	add	r22, r22
 2f8:	77 1f       	adc	r23, r23
 2fa:	88 1f       	adc	r24, r24
 2fc:	da f7       	brpl	.-10     	; 0x2f4 <__floatsisf+0x62>
 2fe:	88 0f       	add	r24, r24
 300:	96 95       	lsr	r25
 302:	87 95       	ror	r24
 304:	97 f9       	bld	r25, 7
 306:	08 95       	ret

00000308 <__gesf2>:
 308:	66 d0       	rcall	.+204    	; 0x3d6 <__fp_cmp>
 30a:	08 f4       	brcc	.+2      	; 0x30e <__gesf2+0x6>
 30c:	8f ef       	ldi	r24, 0xFF	; 255
 30e:	08 95       	ret

00000310 <__mulsf3>:
 310:	0b d0       	rcall	.+22     	; 0x328 <__mulsf3x>
 312:	9c c0       	rjmp	.+312    	; 0x44c <__fp_round>
 314:	8d d0       	rcall	.+282    	; 0x430 <__fp_pscA>
 316:	28 f0       	brcs	.+10     	; 0x322 <__mulsf3+0x12>
 318:	92 d0       	rcall	.+292    	; 0x43e <__fp_pscB>
 31a:	18 f0       	brcs	.+6      	; 0x322 <__mulsf3+0x12>
 31c:	95 23       	and	r25, r21
 31e:	09 f0       	breq	.+2      	; 0x322 <__mulsf3+0x12>
 320:	7e c0       	rjmp	.+252    	; 0x41e <__fp_inf>
 322:	83 c0       	rjmp	.+262    	; 0x42a <__fp_nan>
 324:	11 24       	eor	r1, r1
 326:	c6 c0       	rjmp	.+396    	; 0x4b4 <__fp_szero>

00000328 <__mulsf3x>:
 328:	a2 d0       	rcall	.+324    	; 0x46e <__fp_split3>
 32a:	a0 f3       	brcs	.-24     	; 0x314 <__mulsf3+0x4>

0000032c <__mulsf3_pse>:
 32c:	95 9f       	mul	r25, r21
 32e:	d1 f3       	breq	.-12     	; 0x324 <__mulsf3+0x14>
 330:	95 0f       	add	r25, r21
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	55 1f       	adc	r21, r21
 336:	62 9f       	mul	r22, r18
 338:	f0 01       	movw	r30, r0
 33a:	72 9f       	mul	r23, r18
 33c:	bb 27       	eor	r27, r27
 33e:	f0 0d       	add	r31, r0
 340:	b1 1d       	adc	r27, r1
 342:	63 9f       	mul	r22, r19
 344:	aa 27       	eor	r26, r26
 346:	f0 0d       	add	r31, r0
 348:	b1 1d       	adc	r27, r1
 34a:	aa 1f       	adc	r26, r26
 34c:	64 9f       	mul	r22, r20
 34e:	66 27       	eor	r22, r22
 350:	b0 0d       	add	r27, r0
 352:	a1 1d       	adc	r26, r1
 354:	66 1f       	adc	r22, r22
 356:	82 9f       	mul	r24, r18
 358:	22 27       	eor	r18, r18
 35a:	b0 0d       	add	r27, r0
 35c:	a1 1d       	adc	r26, r1
 35e:	62 1f       	adc	r22, r18
 360:	73 9f       	mul	r23, r19
 362:	b0 0d       	add	r27, r0
 364:	a1 1d       	adc	r26, r1
 366:	62 1f       	adc	r22, r18
 368:	83 9f       	mul	r24, r19
 36a:	a0 0d       	add	r26, r0
 36c:	61 1d       	adc	r22, r1
 36e:	22 1f       	adc	r18, r18
 370:	74 9f       	mul	r23, r20
 372:	33 27       	eor	r19, r19
 374:	a0 0d       	add	r26, r0
 376:	61 1d       	adc	r22, r1
 378:	23 1f       	adc	r18, r19
 37a:	84 9f       	mul	r24, r20
 37c:	60 0d       	add	r22, r0
 37e:	21 1d       	adc	r18, r1
 380:	82 2f       	mov	r24, r18
 382:	76 2f       	mov	r23, r22
 384:	6a 2f       	mov	r22, r26
 386:	11 24       	eor	r1, r1
 388:	9f 57       	subi	r25, 0x7F	; 127
 38a:	50 40       	sbci	r21, 0x00	; 0
 38c:	8a f0       	brmi	.+34     	; 0x3b0 <__mulsf3_pse+0x84>
 38e:	e1 f0       	breq	.+56     	; 0x3c8 <__mulsf3_pse+0x9c>
 390:	88 23       	and	r24, r24
 392:	4a f0       	brmi	.+18     	; 0x3a6 <__mulsf3_pse+0x7a>
 394:	ee 0f       	add	r30, r30
 396:	ff 1f       	adc	r31, r31
 398:	bb 1f       	adc	r27, r27
 39a:	66 1f       	adc	r22, r22
 39c:	77 1f       	adc	r23, r23
 39e:	88 1f       	adc	r24, r24
 3a0:	91 50       	subi	r25, 0x01	; 1
 3a2:	50 40       	sbci	r21, 0x00	; 0
 3a4:	a9 f7       	brne	.-22     	; 0x390 <__mulsf3_pse+0x64>
 3a6:	9e 3f       	cpi	r25, 0xFE	; 254
 3a8:	51 05       	cpc	r21, r1
 3aa:	70 f0       	brcs	.+28     	; 0x3c8 <__mulsf3_pse+0x9c>
 3ac:	38 c0       	rjmp	.+112    	; 0x41e <__fp_inf>
 3ae:	82 c0       	rjmp	.+260    	; 0x4b4 <__fp_szero>
 3b0:	5f 3f       	cpi	r21, 0xFF	; 255
 3b2:	ec f3       	brlt	.-6      	; 0x3ae <__mulsf3_pse+0x82>
 3b4:	98 3e       	cpi	r25, 0xE8	; 232
 3b6:	dc f3       	brlt	.-10     	; 0x3ae <__mulsf3_pse+0x82>
 3b8:	86 95       	lsr	r24
 3ba:	77 95       	ror	r23
 3bc:	67 95       	ror	r22
 3be:	b7 95       	ror	r27
 3c0:	f7 95       	ror	r31
 3c2:	e7 95       	ror	r30
 3c4:	9f 5f       	subi	r25, 0xFF	; 255
 3c6:	c1 f7       	brne	.-16     	; 0x3b8 <__mulsf3_pse+0x8c>
 3c8:	fe 2b       	or	r31, r30
 3ca:	88 0f       	add	r24, r24
 3cc:	91 1d       	adc	r25, r1
 3ce:	96 95       	lsr	r25
 3d0:	87 95       	ror	r24
 3d2:	97 f9       	bld	r25, 7
 3d4:	08 95       	ret

000003d6 <__fp_cmp>:
 3d6:	99 0f       	add	r25, r25
 3d8:	00 08       	sbc	r0, r0
 3da:	55 0f       	add	r21, r21
 3dc:	aa 0b       	sbc	r26, r26
 3de:	e0 e8       	ldi	r30, 0x80	; 128
 3e0:	fe ef       	ldi	r31, 0xFE	; 254
 3e2:	16 16       	cp	r1, r22
 3e4:	17 06       	cpc	r1, r23
 3e6:	e8 07       	cpc	r30, r24
 3e8:	f9 07       	cpc	r31, r25
 3ea:	c0 f0       	brcs	.+48     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3ec:	12 16       	cp	r1, r18
 3ee:	13 06       	cpc	r1, r19
 3f0:	e4 07       	cpc	r30, r20
 3f2:	f5 07       	cpc	r31, r21
 3f4:	98 f0       	brcs	.+38     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3f6:	62 1b       	sub	r22, r18
 3f8:	73 0b       	sbc	r23, r19
 3fa:	84 0b       	sbc	r24, r20
 3fc:	95 0b       	sbc	r25, r21
 3fe:	39 f4       	brne	.+14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 400:	0a 26       	eor	r0, r26
 402:	61 f0       	breq	.+24     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 404:	23 2b       	or	r18, r19
 406:	24 2b       	or	r18, r20
 408:	25 2b       	or	r18, r21
 40a:	21 f4       	brne	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40c:	08 95       	ret
 40e:	0a 26       	eor	r0, r26
 410:	09 f4       	brne	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	a1 40       	sbci	r26, 0x01	; 1
 414:	a6 95       	lsr	r26
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	81 1d       	adc	r24, r1
 41a:	81 1d       	adc	r24, r1
 41c:	08 95       	ret

0000041e <__fp_inf>:
 41e:	97 f9       	bld	r25, 7
 420:	9f 67       	ori	r25, 0x7F	; 127
 422:	80 e8       	ldi	r24, 0x80	; 128
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	08 95       	ret

0000042a <__fp_nan>:
 42a:	9f ef       	ldi	r25, 0xFF	; 255
 42c:	80 ec       	ldi	r24, 0xC0	; 192
 42e:	08 95       	ret

00000430 <__fp_pscA>:
 430:	00 24       	eor	r0, r0
 432:	0a 94       	dec	r0
 434:	16 16       	cp	r1, r22
 436:	17 06       	cpc	r1, r23
 438:	18 06       	cpc	r1, r24
 43a:	09 06       	cpc	r0, r25
 43c:	08 95       	ret

0000043e <__fp_pscB>:
 43e:	00 24       	eor	r0, r0
 440:	0a 94       	dec	r0
 442:	12 16       	cp	r1, r18
 444:	13 06       	cpc	r1, r19
 446:	14 06       	cpc	r1, r20
 448:	05 06       	cpc	r0, r21
 44a:	08 95       	ret

0000044c <__fp_round>:
 44c:	09 2e       	mov	r0, r25
 44e:	03 94       	inc	r0
 450:	00 0c       	add	r0, r0
 452:	11 f4       	brne	.+4      	; 0x458 <__fp_round+0xc>
 454:	88 23       	and	r24, r24
 456:	52 f0       	brmi	.+20     	; 0x46c <__fp_round+0x20>
 458:	bb 0f       	add	r27, r27
 45a:	40 f4       	brcc	.+16     	; 0x46c <__fp_round+0x20>
 45c:	bf 2b       	or	r27, r31
 45e:	11 f4       	brne	.+4      	; 0x464 <__fp_round+0x18>
 460:	60 ff       	sbrs	r22, 0
 462:	04 c0       	rjmp	.+8      	; 0x46c <__fp_round+0x20>
 464:	6f 5f       	subi	r22, 0xFF	; 255
 466:	7f 4f       	sbci	r23, 0xFF	; 255
 468:	8f 4f       	sbci	r24, 0xFF	; 255
 46a:	9f 4f       	sbci	r25, 0xFF	; 255
 46c:	08 95       	ret

0000046e <__fp_split3>:
 46e:	57 fd       	sbrc	r21, 7
 470:	90 58       	subi	r25, 0x80	; 128
 472:	44 0f       	add	r20, r20
 474:	55 1f       	adc	r21, r21
 476:	59 f0       	breq	.+22     	; 0x48e <__fp_splitA+0x10>
 478:	5f 3f       	cpi	r21, 0xFF	; 255
 47a:	71 f0       	breq	.+28     	; 0x498 <__fp_splitA+0x1a>
 47c:	47 95       	ror	r20

0000047e <__fp_splitA>:
 47e:	88 0f       	add	r24, r24
 480:	97 fb       	bst	r25, 7
 482:	99 1f       	adc	r25, r25
 484:	61 f0       	breq	.+24     	; 0x49e <__fp_splitA+0x20>
 486:	9f 3f       	cpi	r25, 0xFF	; 255
 488:	79 f0       	breq	.+30     	; 0x4a8 <__fp_splitA+0x2a>
 48a:	87 95       	ror	r24
 48c:	08 95       	ret
 48e:	12 16       	cp	r1, r18
 490:	13 06       	cpc	r1, r19
 492:	14 06       	cpc	r1, r20
 494:	55 1f       	adc	r21, r21
 496:	f2 cf       	rjmp	.-28     	; 0x47c <__fp_split3+0xe>
 498:	46 95       	lsr	r20
 49a:	f1 df       	rcall	.-30     	; 0x47e <__fp_splitA>
 49c:	08 c0       	rjmp	.+16     	; 0x4ae <__fp_splitA+0x30>
 49e:	16 16       	cp	r1, r22
 4a0:	17 06       	cpc	r1, r23
 4a2:	18 06       	cpc	r1, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	f1 cf       	rjmp	.-30     	; 0x48a <__fp_splitA+0xc>
 4a8:	86 95       	lsr	r24
 4aa:	71 05       	cpc	r23, r1
 4ac:	61 05       	cpc	r22, r1
 4ae:	08 94       	sec
 4b0:	08 95       	ret

000004b2 <__fp_zero>:
 4b2:	e8 94       	clt

000004b4 <__fp_szero>:
 4b4:	bb 27       	eor	r27, r27
 4b6:	66 27       	eor	r22, r22
 4b8:	77 27       	eor	r23, r23
 4ba:	cb 01       	movw	r24, r22
 4bc:	97 f9       	bld	r25, 7
 4be:	08 95       	ret

000004c0 <_exit>:
 4c0:	f8 94       	cli

000004c2 <__stop_program>:
 4c2:	ff cf       	rjmp	.-2      	; 0x4c2 <__stop_program>
